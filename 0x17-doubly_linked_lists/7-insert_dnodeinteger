#include <stdlib.h>
#include "lists.h"

/**
 * *insert_dnodeint_at_index - Inserts a new node at a given position
 * in a doubly linked list.
 * If it is not possible to add the new node at index idx,
 * it does not add the new node and returns NULL.
 * @h: the head node to check if list is empty
 * @idx: integer for traversing the list
 * @n: another interger
 * Return:the address of the new node, or NULL if it failed.
 */
dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n)
{
	if (h == NULL)
		return (NULL);

	/*Special case: insert at the beginning*/
	if (idx == 0)
		return (add_dnodeint(h, n));

	/*Create a new node*/
	dlistint_t *new_node = malloc(sizeof(dlistint_t));

	if (new_node == NULL)
		return (NULL);
	/*Set the value of the new node*/
	new_node->n = n;

	/*Traverse the list to find the node at position (idx - 1)*/
	dlistint_t *current = *h;

	for (unsigned int i = 0; i < idx - 1; i++)
	{
		if (current == NULL)
		{
			/*Failed to reach the desired index, so free the new node and return NULL*/
			free(new_node);
			return (NULL);
		}
		current = current->next;
	}
	/*Update the pointers to insert the new node*/
	new_node->next = current->next;
	new_node->prev = current;
	if (current->next != NULL)
		current->next->prev = new_node;
	current->next = new_node;

	return (new_node);
}
